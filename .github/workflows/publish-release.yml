name: Create versioned release
# Test, build, and publish a release draft on new vX.Y.Z tag

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    name: Create versioned release draft
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1

    - name: Generate version string
      id: get-version
      run: |
        VERSION=$(ant -q -S print_version)
        SHORT=$(echo "${VERSION}" | cut -d. -f-2)
        BUILD=$(cat .build.number | grep build.number | cut -f2 -d"=")
        echo "::set-output name=BUILD::$BUILD"
        echo "::set-output name=SHORT::$SHORT"
        echo "::set-output name=VERSION::$VERSION"
        echo "::set-output name=TAG::$(echo "v${VERSION}")"

        REFTAG="$(echo "$GITHUB_REF" | awk -F/ '{print $NF}')"
        echo "::set-output name=REFTAG::$REFTAG"

    - name: Sanity check
      id: sanity_check
      run: |
        # env
        BUILD=${{ steps.get-version.outputs.BUILD }}
        SHORT=${{ steps.get-version.outputs.SHORT }}
        VERSION=${{ steps.get-version.outputs.VERSION }}
        TAG=${{ steps.get-version.outputs.TAG }}
        REFTAG=${{ steps.get-version.outputs.REFTAG }}
        # tag is v1.2[.3]-567[.abc4]
        if [[ "$TAG" =~ ^v[0-9][0-9]*[.][0-9][0-9]*([.][0-9][0-9]*)?(-[1-9][0-9]*)([.][a-z][a-z0-9]*)?$ ]]; then
          echo tag $TAG okay
        else
          echo "tag (${VERSION},${BASE},${SHORT},${BUILD}) $TAG not okay!"
          exit 1
        fi

        # version is 1.2[.3]-567[.abc4]
        if [[ "${VERSION}" =~ ^[0-9][0-9]*[.][0-9][0-9]*([.][0-9][0-9]*)?(-[1-9][0-9]*)([.][a-z][a-z0-9]*)?$ ]]; then
          echo version $VERSION okay
        else
          echo "version (${VERSION},${BASE},${SHORT},${BUILD}) $VERSION not okay!"
          exit 1
        fi

        # git tag has correct version
        if [[ "$TAG" == "$REFTAG" ]]; then
          echo tags match
        else
          echo "WARNING: $TAG <> $REFTAG"
          TAG=$REFTAG
          # exit 1
        fi
        echo "::set-output name=TAG::$TAG"

        # most recent tag has older build number
        LASTTAG=$(git tag -l v* --sort='-committerdate')
        OLDBUILD=$(git show ${LASTTAG}:.build.number | grep build.number | cut -f2 -d"=")
        if [[ $BUILD == $OLDBUILD ]]; then
          echo "build.number $BUILD has not changed since most recent tag ${LASTTAG}, please update by running ant build locally!"
          exit 1
        fi

    - name: Test with ant
      run: |
         ant -noinput -buildfile build.xml run_tests
         fails=$(grep -L  "Failures: 0, Errors: 0" test/junit/TEST-*)
         if [ -n "$fails" ]; then
           echo Errors in $fails
           cat $fails
           exit 1
         fi
      # do not exit before all commands are executed
      shell: bash --noprofile --norc -o pipefail {0}

    - name: Build with ant
      run: |
        ant -noinput -buildfile build.xml distribute

    - name: Read RELEASENOTES and CHANGELOG
      id: changelog
      run: |
        value=$(cat RELEASENOTES.txt | iconv -f ISO-8859-1; echo -e '\n## Excerpt from CHANGELOG.txt\n\n'; head -20 CHANGELOG.txt | iconv -f ISO-8859-1; echo -e '\n...\n')
        value="${value//'%'/'%25'}"
        value="${value//$'\n'/'%0A'}"
        value="${value//$'\r'/'%0D'}"
        echo "::set-output name=BODY::$value"

    - name: prepare meta
      id: prepare-meta
      run: |
        set -x
        if [[ "${{ steps.sanity_check.outputs.TAG }}" =~ .*-([0-9]*[.])?([a-zA-Z][a-zA-Z]*).* ]]; then
          TYPE=$(echo ${{ steps.sanity_check.outputs.TAG }} | sed -e "s/.*-\([0-9]*[.]\)\?\([a-zA-Z][a-zA-Z]*\).*/\2/")
        else
          TYPE=stable
        fi
        if [[ ! "$TYPE" =~ ^[a-zA-Z]+$ ]]; then
          echo "invalid type $TYPE"
          exit 1
        fi
        echo "::set-output name=TYPE::$TYPE"

    - name: Release
      uses: softprops/action-gh-release@v1
      with:
        target_commitish: master
        tag_name: ${{ steps.get-version.outputs.TAG }}
        draft: true
        prerelease: false
        fail_on_unmatched_files: false
        name: Release v${{ steps.get-version.outputs.VERSION }} (${{ steps.prepare-meta.outputs.TYPE }})
        body: ${{ steps.changelog.outputs.BODY }}
        files: |
          README.md
          VERSION
          moooooo_release.v${{ steps.get-version.outputs.VERSION }}
